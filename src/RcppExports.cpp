// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/uchardet.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// detect_file_enc
StringVector detect_file_enc(StringVector x);
static SEXP _uchardet_detect_file_enc_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_file_enc(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _uchardet_detect_file_enc(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_uchardet_detect_file_enc_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// detect_raw_enc
String detect_raw_enc(RawVector x);
static SEXP _uchardet_detect_raw_enc_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RawVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_raw_enc(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _uchardet_detect_raw_enc(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_uchardet_detect_raw_enc_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// detect_str_enc
StringVector detect_str_enc(StringVector x);
static SEXP _uchardet_detect_str_enc_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_str_enc(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _uchardet_detect_str_enc(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_uchardet_detect_str_enc_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _uchardet_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("StringVector(*detect_file_enc)(StringVector)");
        signatures.insert("String(*detect_raw_enc)(RawVector)");
        signatures.insert("StringVector(*detect_str_enc)(StringVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _uchardet_RcppExport_registerCCallable() { 
    R_RegisterCCallable("uchardet", "_uchardet_detect_file_enc", (DL_FUNC)_uchardet_detect_file_enc_try);
    R_RegisterCCallable("uchardet", "_uchardet_detect_raw_enc", (DL_FUNC)_uchardet_detect_raw_enc_try);
    R_RegisterCCallable("uchardet", "_uchardet_detect_str_enc", (DL_FUNC)_uchardet_detect_str_enc_try);
    R_RegisterCCallable("uchardet", "_uchardet_RcppExport_validate", (DL_FUNC)_uchardet_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_uchardet_detect_file_enc", (DL_FUNC) &_uchardet_detect_file_enc, 1},
    {"_uchardet_detect_raw_enc", (DL_FUNC) &_uchardet_detect_raw_enc, 1},
    {"_uchardet_detect_str_enc", (DL_FUNC) &_uchardet_detect_str_enc, 1},
    {"_uchardet_RcppExport_registerCCallable", (DL_FUNC) &_uchardet_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_uchardet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
